#include <iostream>
#include <vector>
#include <climits>  
using namespace std;
class OBST {
    vector<int> keys, freq;
    vector<vector<int>> cost, root;
    int n;
public:
    void getInput();
    void buildOBST();
    void printPreorder(int, int);
};

void OBST::getInput() {
    cout << "\nEnter number of keys: ";
    cin >> n;
    keys.resize(n);
    freq.resize(n);
    cost.assign(n, vector<int>(n, 0));
    root.assign(n, vector<int>(n, 0));
    cout << "\nEnter keys: ";
    for (int i = 0; i < n; i++)
        cin >> keys[i];
    cout << "\nEnter corresponding frequencies: ";
    for (int i = 0; i < n; i++)
        cin >> freq[i];
}

void OBST::buildOBST() {
    vector<vector<int>> sum(n, vector<int>(n, 0));
    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
        root[i][i] = i;
        sum[i][i] = freq[i];
    }
    
    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            sum[i][j] = sum[i][j - 1] + freq[j];
            cost[i][j] = INT_MAX;
            for (int r = i; r <= j; r++) {
                int leftCost = (r > i) ? cost[i][r - 1] : 0;
                int rightCost = (r < j) ? cost[r + 1][j] : 0;
                int totalCost = leftCost + rightCost + sum[i][j];
                if (totalCost < cost[i][j]) {
                    cost[i][j] = totalCost;
                    root[i][j] = r;
                }
            }
        }
    }
    cout << "\nOptimal BST Cost: " << cost[0][n - 1] << endl;
    cout << "\nPreorder Traversal of OBST: ";
    printPreorder(0, n - 1);
    cout << endl;
}

void OBST::printPreorder(int i, int j) {
    if (i > j) return;
    int r = root[i][j];
    cout << keys[r] << " ";
    printPreorder(i, r - 1);
    printPreorder(r + 1, j);
}

int main() {
    OBST tree;
    cout << "\n-----*** Optimal BST Construction ***-----";
    tree.getInput();
    tree.buildOBST();
    return 0;
}
